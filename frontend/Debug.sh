#!/bin/bash

# M√ìDULO: Debug NextAuth e Google Login
# LOCALIZA√á√ÉO: debug-nextauth.sh
# DESCRI√á√ÉO: Verifica configura√ß√£o do NextAuth para resolver login Google

echo "üîç VERIFICANDO CONFIGURA√á√ÉO NEXTAUTH..."

# 1. Verificar vari√°veis de ambiente essenciais
echo ""
echo "üìã Verificando vari√°veis ENV essenciais:"

if [ -f ".env.local" ]; then
    echo "‚úÖ .env.local encontrado"
    
    # Verificar vari√°veis cr√≠ticas (sem exibir valores)
    ENV_VARS=("NEXTAUTH_SECRET" "NEXTAUTH_URL" "GOOGLE_CLIENT_ID" "GOOGLE_CLIENT_SECRET")
    
    for var in "${ENV_VARS[@]}"; do
        if grep -q "^$var=" .env.local; then
            echo "‚úÖ $var configurado"
        else
            echo "‚ùå $var FALTANDO!"
        fi
    done
else
    echo "‚ùå .env.local n√£o encontrado!"
    echo "üí° Crie o arquivo .env.local com as vari√°veis necess√°rias"
fi

# 2. Verificar arquivo de configura√ß√£o NextAuth
echo ""
echo "üìã Verificando configura√ß√£o NextAuth:"

if [ -f "app/api/auth/[...nextauth]/route.ts" ]; then
    echo "‚úÖ Route NextAuth encontrado"
    
    # Verificar se Google provider est√° configurado
    if grep -q "GoogleProvider" app/api/auth/\[...nextauth\]/route.ts; then
        echo "‚úÖ Google Provider configurado"
    else
        echo "‚ùå Google Provider n√£o encontrado!"
    fi
    
    # Verificar se authOptions est√° exportado
    if grep -q "export.*authOptions" app/api/auth/\[...nextauth\]/route.ts; then
        echo "‚úÖ authOptions exportado"
    else
        echo "‚ùå authOptions n√£o exportado!"
    fi
    
else
    echo "‚ùå Route NextAuth n√£o encontrado em app/api/auth/[...nextauth]/route.ts"
fi

# 3. Testar endpoint NextAuth
echo ""
echo "üìã Testando endpoints NextAuth:"

# Testar se servidor est√° rodando
if curl -s http://localhost:3000/api/auth/providers >/dev/null 2>&1; then
    echo "‚úÖ Endpoint /api/auth/providers acess√≠vel"
    
    # Verificar se Google est√° na lista de providers
    PROVIDERS=$(curl -s http://localhost:3000/api/auth/providers)
    if echo "$PROVIDERS" | grep -q "google"; then
        echo "‚úÖ Google provider ativo"
    else
        echo "‚ùå Google provider n√£o ativo!"
        echo "üìã Providers dispon√≠veis:"
        echo "$PROVIDERS" | jq . 2>/dev/null || echo "$PROVIDERS"
    fi
else
    echo "‚ùå Servidor n√£o est√° rodando ou endpoint n√£o acess√≠vel"
    echo "üí° Execute 'pnpm dev' em outro terminal"
fi

# 4. Verificar callback URLs
echo ""
echo "üìã URLs de Callback esperadas:"
echo "üîó Google Console: http://localhost:3000/api/auth/callback/google"
echo "üîó NextAuth: http://localhost:3000/api/auth/callback/google"

# 5. Dicas de configura√ß√£o
echo ""
echo "üí° DICAS PARA RESOLVER LOGIN GOOGLE:"
echo ""
echo "1. Verificar .env.local:"
echo "   NEXTAUTH_SECRET=sua-chave-secreta-aqui"
echo "   NEXTAUTH_URL=http://localhost:3000"
echo "   GOOGLE_CLIENT_ID=seu-client-id"
echo "   GOOGLE_CLIENT_SECRET=seu-client-secret"
echo ""
echo "2. Verificar Google Cloud Console:"
echo "   - APIs & Services > Credentials"
echo "   - Authorized redirect URIs deve incluir:"
echo "     http://localhost:3000/api/auth/callback/google"
echo ""
echo "3. Testar endpoint manualmente:"
echo "   curl http://localhost:3000/api/auth/providers"
echo ""
echo "4. Verificar logs do NextAuth:"
echo "   - Adicione debug: true na configura√ß√£o"
echo "   - Verifique console do servidor"

echo ""
echo "üîç Verifica√ß√£o conclu√≠da!"