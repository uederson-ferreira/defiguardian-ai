# üöÄ RiskGuardian AI - Docker Compose CORRIGIDO
# Realidade: Avalanche Fuji + 27 Contratos Deployados + ElizaOS funcionando

services:
  # ============================================================================
  # FRONTEND - Next.js (Avalanche Fuji)
  # ============================================================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8002
      # üéØ AVALANCHE FUJI (realidade atual)
      - NEXT_PUBLIC_CHAIN_ID=43113
      - NEXT_PUBLIC_RPC_URL=https://api.avax-test.network/ext/bc/C/rpc
      - NEXT_PUBLIC_NETWORK_NAME=avalanche-fuji
      - NEXT_PUBLIC_EXPLORER_URL=https://testnet.snowtrace.io
      # üîó CONTRATOS CORE DEPLOYADOS NO FUJI
      - NEXT_PUBLIC_CONTRACT_REGISTRY=0xA65647C7335835F477831E4E907aBaA1560646a8
      - NEXT_PUBLIC_RISK_REGISTRY=0xF404b05B55850cBaC8891c9Db1524Fc1D437124C
      - NEXT_PUBLIC_RISK_ORACLE=0x14Ca6F2BEd3FC051E1E8f409D04369A75894a4A8
      - NEXT_PUBLIC_PORTFOLIO_ANALYZER=0x1e60Cf3CA97866ddC6cb640D169061da9Fe04192
      - NEXT_PUBLIC_RISK_INSURANCE=0x6021d94b73D1b4b0515902BEa7bf17cE3dDa2e8F
      - NEXT_PUBLIC_ALERT_SYSTEM=0xe46F4AcC01B4664c50E421dBb50343096be05Ecc
      # üõ°Ô∏è HEDGE CONTRACTS
      - NEXT_PUBLIC_STOP_LOSS_HEDGE=0x1e7D390EB42112f33930A9Dab1cdeB848361f163
      - NEXT_PUBLIC_REBALANCE_HEDGE=0xe261a9e260C7F4aCB9E2a1c3daeb141791bbb600
      - NEXT_PUBLIC_VOLATILITY_HEDGE=0x5C6c0B72FeDB3027eDee33C62bb7C5D3700a488F
      - NEXT_PUBLIC_CROSS_CHAIN_HEDGE=0xaC521848dC05C7fE4eb43236D1719AEA725143cF
      # ü§ñ AUTOMATION
      - NEXT_PUBLIC_RISK_GUARDIAN_MASTER=0x00F4Ce590406031E88666BF1Fd1310A809a8A3a0
      # üîß Development fallback (local Anvil para testes)
      - NEXT_PUBLIC_ANVIL_RPC=http://localhost:8545
      - NEXT_PUBLIC_ANVIL_CHAIN_ID=31337
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
      - /app/.pnpm-store  # Cache pnpm
    depends_on:
      - backend
    networks:
      - riskguardian-network
    restart: unless-stopped
    
  # ============================================================================
  # BACKEND - Node.js API (Avalanche Fuji)
  # ============================================================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    ports:
      - "8002:8002"  # Porta corrigida conforme .env atual
    environment:
      - NODE_ENV=development
      - PORT=8002
      # üåê AVALANCHE FUJI TESTNET (prioridade)
      - BLOCKCHAIN_NETWORK=avalanche-fuji
      - FUJI_CHAIN_ID=43113
      - FUJI_RPC_URL=https://api.avax-test.network/ext/bc/C/rpc
      - FUJI_EXPLORER=https://testnet.snowtrace.io
      # üîó CONTRATOS CORE NO FUJI
      - CONTRACT_REGISTRY_ADDRESS=0xA65647C7335835F477831E4E907aBaA1560646a8
      - RISK_REGISTRY_ADDRESS=0xF404b05B55850cBaC8891c9Db1524Fc1D437124C
      - RISK_ORACLE_ADDRESS=0x14Ca6F2BEd3FC051E1E8f409D04369A75894a4A8
      - PORTFOLIO_ANALYZER_ADDRESS=0x1e60Cf3CA97866ddC6cb640D169061da9Fe04192
      - RISK_INSURANCE_ADDRESS=0x6021d94b73D1b4b0515902BEa7bf17cE3dDa2e8F
      - ALERT_SYSTEM_ADDRESS=0xe46F4AcC01B4664c50E421dBb50343096be05Ecc
      - RISK_GUARDIAN_MASTER_ADDRESS=0x00F4Ce590406031E88666BF1Fd1310A809a8A3a0
      # üõ°Ô∏è HEDGE CONTRACTS
      - STOP_LOSS_HEDGE_ADDRESS=0x1e7D390EB42112f33930A9Dab1cdeB848361f163
      - REBALANCE_HEDGE_ADDRESS=0xe261a9e260C7F4aCB9E2a1c3daeb141791bbb600
      - VOLATILITY_HEDGE_ADDRESS=0x5C6c0B72FeDB3027eDee33C62bb7C5D3700a488F
      - CROSS_CHAIN_HEDGE_ADDRESS=0xaC521848dC05C7fE4eb43236D1719AEA725143cF
      # üîó CCIP (Cross Chain)
      - CCIP_ROUTER_FUJI=0x554472a2720E5E7D5D3C817529aBa05eed5F82D8
      - LINK_TOKEN_FUJI=0x0b9d5D9136855f6FEc3c0993feE6E9ce8a297846
      # üìä DATABASE
      - DATABASE_URL=postgresql://chromia:chromia_password@postgres:5432/chromia
      - REDIS_URL=redis://redis:6379
      # üîë AUTHENTICATION & SECURITY  
      - JWT_SECRET=${JWT_SECRET:-riskg4rd14n-s3cur3-jwt-k3y-f0r-d3v3l0pm3nt-h4ck4th0n-2025-chromion-ai}
      - JWT_EXPIRES_IN=7d
      # üîß APIs (opcional)
      - ETHERSCAN_API_KEY=${ETHERSCAN_API_KEY}
      - CHAINLINK_API_KEY=${CHAINLINK_API_KEY}
      - ALCHEMY_API_KEY=${ALCHEMY_API_KEY}
      # üìù LOGS
      - LOG_LEVEL=debug
      - LOG_FILE=logs/app.log
      # üåê CORS
      - ALLOWED_ORIGINS=http://localhost:3000,http://localhost:3001
      # üîß Development fallback (Anvil local)
      - ETHEREUM_RPC_URL_ANVIL=http://anvil:8545
      - ANVIL_CHAIN_ID=31337
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      # ‚ùå Chromia e Anvil tornados opcionais (n√£o bloqueantes)
    networks:
      - riskguardian-network
    restart: unless-stopped

  # ============================================================================
  # ELIZAOS AGENT - AI Risk Analysis (Funcionando)
  # ============================================================================
  elizaos-agent:
    build:
      context: ./elizaos-agent
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - PORT=3001
      # ü§ñ AI CONFIGURATION
      - LOG_LEVEL=debug
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - AI_PROVIDER=${AI_PROVIDER:-openrouter}
      - AI_MODEL_RISK=${AI_MODEL_RISK:-deepseek/deepseek-r1-0528-qwen3-8b:free}
      - AI_MODEL_CHAT=${AI_MODEL_CHAT:-deepseek/deepseek-r1-0528-qwen3-8b:free}
      - AI_MODEL_DATA=${AI_MODEL_DATA:-deepseek/deepseek-r1-0528-qwen3-8b:free}
      - AI_MODEL_FALLBACK=${AI_MODEL_FALLBACK:-deepseek/deepseek-r1-0528-qwen3-8b:free}
      # üîë APIs (backup - apenas se dispon√≠vel)
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      # üåê NETWORK INTEGRATIONS
      - BACKEND_URL=http://backend:8002
      - REDIS_URL=redis://redis:6379
      # üîó AVALANCHE FUJI CONNECTION
      - AVALANCHE_RPC_URL=https://api.avax-test.network/ext/bc/C/rpc
      - FUJI_CHAIN_ID=43113
      # üîß Development fallback
      - ETHEREUM_RPC_URL=http://anvil:8545
      - ANVIL_CHAIN_ID=31337
      # ‚öôÔ∏è GENERAL CONFIG
      - CORS_ORIGIN=*
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=100
      - CACHE_TTL=5
      - CACHE_CHECK_PERIOD=1
    depends_on:
      - backend
      - redis
    networks:
      - riskguardian-network
    restart: unless-stopped

  # ============================================================================
  # DATABASES - PostgreSQL + Redis (Obrigat√≥rios)
  # ============================================================================
  postgres:
    image: ankane/pgvector:latest
    environment:
      - POSTGRES_DB=chromia
      - POSTGRES_USER=chromia
      - POSTGRES_PASSWORD=chromia_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - riskguardian-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U chromia"]
      interval: 10s
      timeout: 5s
      retries: 5
      
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - riskguardian-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  # ============================================================================
  # OPTIONAL SERVICES (Profiles)
  # ============================================================================
  
  # üîß Chromia Node (opcional - para desenvolvimento h√≠brido)
  chromia-node:
    build:
      context: ./chromia
      dockerfile: Dockerfile
    ports:
      - "7740:7740"
      - "7741:7741"
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=chromia
      - POSTGRES_PASSWORD=chromia_password
      - POSTGRES_DB=chromia
      - NODE_ENV=development
      - DEBUG=true
      - LOG_LEVEL=DEBUG
    volumes:
      - ./chromia/config:/app/config:ro
      - ./chromia/src:/app/src:ro
      - chromia_data:/app/data
      - chromia_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - riskguardian-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:7740/api/v1/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    profiles:
      - optional

  # üîß Anvil (opcional - apenas para desenvolvimento local)
  anvil:
    image: ghcr.io/foundry-rs/foundry:latest
    entrypoint: ["anvil", "--host", "0.0.0.0", "--port", "8545", "--chain-id", "31337", "--accounts", "10", "--balance", "10000", "--gas-limit", "30000000", "--block-time", "2"]
    ports:
      - "8545:8545"
    networks:
      - riskguardian-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "ps aux | grep '[a]nvil' | grep -v grep || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 20s
    profiles:
      - optional

  # üõ†Ô∏è DEVELOPMENT TOOLS
  pgadmin:
    image: dpage/pgadmin4:latest
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@riskguardian.ai
      - PGADMIN_DEFAULT_PASSWORD=admin123
      - PGADMIN_CONFIG_SERVER_MODE=False
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - riskguardian-network
    profiles:
      - tools

  redis-commander:
    image: rediscommander/redis-commander:latest
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - riskguardian-network
    profiles:
      - tools

# ============================================================================
# VOLUMES & NETWORKS
# ============================================================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  chromia_data:
    driver: local
  chromia_logs:
    driver: local
  pgadmin_data:
    driver: local

networks:
  riskguardian-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16