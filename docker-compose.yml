services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_CHROMIA_URL=http://localhost:7740
      - NEXT_PUBLIC_ETHEREUM_RPC=http://localhost:8545
      - NEXT_PUBLIC_CHAIN_ID=31337
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - riskguardian-network
    restart: unless-stopped

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    ports:
      - "8000:8000"
    environment:
      - NODE_ENV=development
      - PORT=8000
      - CHROMIA_URL=http://chromia-node:7740
      - REDIS_URL=redis://redis:6379
      - ETHEREUM_RPC_URL=http://anvil:8545
      - JWT_SECRET=${JWT_SECRET}
      - CHAINLINK_API_KEY=${CHAINLINK_API_KEY}
      - ETHERSCAN_API_KEY=${ETHERSCAN_API_KEY}
      - ALCHEMY_API_KEY=${ALCHEMY_API_KEY}
      - LOG_LEVEL=debug
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      redis:
        condition: service_healthy
      chromia-node:
        condition: service_healthy
      anvil:
        condition: service_healthy  # ✅ AGORA FUNCIONARÁ!
    networks:
      - riskguardian-network
    restart: unless-stopped

  elizaos-agent:
    build:
      context: ./elizaos-agent
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - PORT=3001
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - AI_PROVIDER=${AI_PROVIDER}
      - AI_MODEL_RISK=${AI_MODEL_RISK}
      - AI_MODEL_CHAT=${AI_MODEL_CHAT}
      - AI_MODEL_DATA=${AI_MODEL_DATA}
      - AI_MODEL_FALLBACK=${AI_MODEL_FALLBACK}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - CHROMIA_URL=http://chromia-node:7740
      - BACKEND_URL=http://backend:8000
      - REDIS_URL=redis://redis:6379
      - ETHEREUM_RPC_URL=http://anvil:8545
      - CHAINLINK_API_KEY=${CHAINLINK_API_KEY}
      - LOG_LEVEL=debug
    depends_on:
      - backend
      - chromia-node
      - redis
    networks:
      - riskguardian-network
    restart: unless-stopped

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=chromia
      - POSTGRES_USER=chromia
      - POSTGRES_PASSWORD=chromia_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./chromia/database/init:/docker-entrypoint-initdb.d
    networks:
      - riskguardian-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U chromia"]
      interval: 10s
      timeout: 5s
      retries: 5

  chromia-node:
    image: nginx:alpine
    ports:
      - "7740:80"
    volumes:
      - ./chromia/mock:/usr/share/nginx/html:ro
    networks:
      - riskguardian-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - riskguardian-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # ✅ ANVIL FUNCIONANDO - SÓ HEALTH CHECK CORRIGIDO
  anvil:
    image: ghcr.io/foundry-rs/foundry:latest
    # ✅ ENTRYPOINT PERFEITO! (funcionou 100%)
    entrypoint: ["anvil", "--host", "0.0.0.0", "--port", "8545", "--chain-id", "31337", "--accounts", "10", "--balance", "10000", "--gas-limit", "30000000", "--block-time", "2"]
    ports:
      - "8545:8545"
    networks:
      - riskguardian-network
    restart: unless-stopped
    # ✅ HEALTH CHECK SIMPLES (sem ferramentas externas)
    healthcheck:
      test: ["CMD-SHELL", "ps aux | grep '[a]nvil' | grep -v grep || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 20s

  pgadmin:
    image: dpage/pgadmin4:latest
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@riskguardian.ai
      - PGADMIN_DEFAULT_PASSWORD=admin123
      - PGADMIN_CONFIG_SERVER_MODE=False
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - riskguardian-network
    profiles:
      - tools

  contracts:
    build:
      context: ./contracts
      dockerfile: Dockerfile
    environment:
      - ETHEREUM_RPC_URL=http://anvil:8545
      - PRIVATE_KEY=${PRIVATE_KEY:-0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80}
      - ETHERSCAN_API_KEY=${ETHERSCAN_API_KEY}
    volumes:
      - ./contracts:/app
      - contracts_cache:/app/cache
      - contracts_out:/app/out
    depends_on:
      anvil:
        condition: service_healthy
    networks:
      - riskguardian-network
    # profiles:
    #   - tools
        
volumes:
  postgres_data:
    driver: local
  chromia_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local
  contracts_cache:
    driver: local
  contracts_out:
    driver: local

networks:
  riskguardian-network:
    driver: bridge