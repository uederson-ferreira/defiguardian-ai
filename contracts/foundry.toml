# foundry.toml - RiskGuardian AI Smart Contracts Configuration

[profile.default]
src = "src"
out = "out"
libs = ["lib"]
test = "test"
cache_path = "cache"
broadcast = "broadcast"

# Compiler settings
solc = "0.8.20"
optimizer = true
optimizer_runs = 200
via_ir = false
verbosity = 2

# Testing configuration
gas_reports = ["*"]
gas_limit = 30_000_000
ffi = true
fs_permissions = [{ access = "read-write", path = "./" }]

# Network configuration
auto_detect_solc = false
offline = false
force = false

# Remappings for dependencies
remappings = [
    "@openzeppelin/=lib/openzeppelin-contracts/",
    "@chainlink/=lib/chainlink/",
    "forge-std/=lib/forge-std/src/",
    "ds-test/=lib/ds-test/src/"
]

# RPC endpoints for different networks
[rpc_endpoints]
mainnet = "https://eth-mainnet.alchemyapi.io/v2/${ALCHEMY_API_KEY}"
goerli = "https://eth-goerli.alchemyapi.io/v2/${ALCHEMY_API_KEY}"
sepolia = "https://eth-sepolia.g.alchemy.com/v2/${ALCHEMY_API_KEY}"
polygon = "https://polygon-mainnet.g.alchemy.com/v2/${ALCHEMY_API_KEY}"
arbitrum = "https://arb-mainnet.g.alchemy.com/v2/${ALCHEMY_API_KEY}"
optimism = "https://opt-mainnet.g.alchemy.com/v2/${ALCHEMY_API_KEY}"
anvil = "http://localhost:8545"
local = "http://localhost:8545"

# Etherscan configuration for contract verification
[etherscan]
mainnet = { key = "${ETHERSCAN_API_KEY}" }
goerli = { key = "${ETHERSCAN_API_KEY}" }
sepolia = { key = "${ETHERSCAN_API_KEY}" }
polygon = { key = "${POLYGONSCAN_API_KEY}", url = "https://api.polygonscan.com/" }
arbitrum = { key = "${ARBISCAN_API_KEY}", url = "https://api.arbiscan.io/" }
optimism = { key = "${OPTIMISM_API_KEY}", url = "https://api-optimistic.etherscan.io/" }

# Profile for testing - more verbose, with coverage
[profile.test]
verbosity = 3
gas_reports = ["*"]
coverage = true
fuzz_runs = 1000
fuzz_max_test_rejects = 100000

# Profile for production deployment
[profile.production]
optimizer = true
optimizer_runs = 1000
via_ir = true
bytecode_hash = "none"
sparse_mode = true

# Profile for development - faster compilation
[profile.dev]
optimizer = false
optimizer_runs = 1
via_ir = false

# Profile for CI/CD
[profile.ci]
verbosity = 3
fuzz_runs = 10000
invariant_runs = 256
invariant_depth = 500
gas_reports = ["*"]

# Fuzzing configuration
[invariant]
runs = 256
depth = 500
fail_on_revert = true
call_override = false
dictionary_weight = 40
include_storage = true
include_push_bytes = true

[fuzz]
runs = 1000
max_test_rejects = 100000
seed = "0x1234567890123456"
dictionary_weight = 40
include_storage = true
include_push_bytes = true

# Formatting configuration
[fmt]
line_length = 100
tab_width = 4
bracket_spacing = true
int_types = "long"
multiline_func_header = "all"
quote_style = "double"
number_underscore = "thousands"
single_line_statement_blocks = "preserve"