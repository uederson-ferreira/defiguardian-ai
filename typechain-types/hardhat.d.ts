/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "CCIPReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CCIPReceiver__factory>;
    getContractFactory(
      name: "IAny2EVMMessageReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAny2EVMMessageReceiver__factory>;
    getContractFactory(
      name: "IRouterClient",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRouterClient__factory>;
    getContractFactory(
      name: "Client",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Client__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "AutomationBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AutomationBase__factory>;
    getContractFactory(
      name: "AutomationCompatible",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AutomationCompatible__factory>;
    getContractFactory(
      name: "AutomationCompatibleInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AutomationCompatibleInterface__factory>;
    getContractFactory(
      name: "AggregatorV3Interface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AggregatorV3Interface__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "CrossChainHedge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CrossChainHedge__factory>;
    getContractFactory(
      name: "RebalanceHedge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RebalanceHedge__factory>;
    getContractFactory(
      name: "IRebalanceHedge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRebalanceHedge__factory>;
    getContractFactory(
      name: "IStopLossHedge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStopLossHedge__factory>;
    getContractFactory(
      name: "IVolatilityHedge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVolatilityHedge__factory>;
    getContractFactory(
      name: "RiskGuardianMaster",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RiskGuardianMaster__factory>;
    getContractFactory(
      name: "StopLossHedge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StopLossHedge__factory>;
    getContractFactory(
      name: "VolatilityHedge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VolatilityHedge__factory>;

    getContractAt(
      name: "CCIPReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CCIPReceiver>;
    getContractAt(
      name: "IAny2EVMMessageReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAny2EVMMessageReceiver>;
    getContractAt(
      name: "IRouterClient",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRouterClient>;
    getContractAt(
      name: "Client",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Client>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "AutomationBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AutomationBase>;
    getContractAt(
      name: "AutomationCompatible",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AutomationCompatible>;
    getContractAt(
      name: "AutomationCompatibleInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AutomationCompatibleInterface>;
    getContractAt(
      name: "AggregatorV3Interface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AggregatorV3Interface>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "CrossChainHedge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CrossChainHedge>;
    getContractAt(
      name: "RebalanceHedge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RebalanceHedge>;
    getContractAt(
      name: "IRebalanceHedge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRebalanceHedge>;
    getContractAt(
      name: "IStopLossHedge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStopLossHedge>;
    getContractAt(
      name: "IVolatilityHedge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVolatilityHedge>;
    getContractAt(
      name: "RiskGuardianMaster",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RiskGuardianMaster>;
    getContractAt(
      name: "StopLossHedge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StopLossHedge>;
    getContractAt(
      name: "VolatilityHedge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VolatilityHedge>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
