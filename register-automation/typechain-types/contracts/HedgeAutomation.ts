/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface HedgeAutomationInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "checkUpkeep"
      | "createStrategy"
      | "deactivateStrategy"
      | "getAllUsers"
      | "owner"
      | "performUpkeep"
      | "priceFeeds"
      | "transferOwnership"
      | "updateStrategy"
      | "userStrategies"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "RebalanceTriggered"
      | "StrategyCreated"
      | "StrategyExecuted"
      | "StrategyUpdated"
      | "UpkeepChecked"
      | "UpkeepPerformed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "checkUpkeep",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createStrategy",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateStrategy",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllUsers",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "performUpkeep",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "priceFeeds",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStrategy",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userStrategies",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "checkUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "performUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "priceFeeds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userStrategies",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RebalanceTriggeredEvent {
  export type InputTuple = [
    user: AddressLike,
    amount: BigNumberish,
    price: BigNumberish
  ];
  export type OutputTuple = [user: string, amount: bigint, price: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StrategyCreatedEvent {
  export type InputTuple = [
    user: AddressLike,
    strategyId: BigNumberish,
    hedgeType: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    strategyId: bigint,
    hedgeType: bigint
  ];
  export interface OutputObject {
    user: string;
    strategyId: bigint;
    hedgeType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StrategyExecutedEvent {
  export type InputTuple = [
    user: AddressLike,
    strategyId: BigNumberish,
    price: BigNumberish
  ];
  export type OutputTuple = [user: string, strategyId: bigint, price: bigint];
  export interface OutputObject {
    user: string;
    strategyId: bigint;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StrategyUpdatedEvent {
  export type InputTuple = [user: AddressLike, strategyId: BigNumberish];
  export type OutputTuple = [user: string, strategyId: bigint];
  export interface OutputObject {
    user: string;
    strategyId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpkeepCheckedEvent {
  export type InputTuple = [needed: boolean, performData: BytesLike];
  export type OutputTuple = [needed: boolean, performData: string];
  export interface OutputObject {
    needed: boolean;
    performData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpkeepPerformedEvent {
  export type InputTuple = [
    user: AddressLike,
    strategyId: BigNumberish,
    price: BigNumberish
  ];
  export type OutputTuple = [user: string, strategyId: bigint, price: bigint];
  export interface OutputObject {
    user: string;
    strategyId: bigint;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface HedgeAutomation extends BaseContract {
  connect(runner?: ContractRunner | null): HedgeAutomation;
  waitForDeployment(): Promise<this>;

  interface: HedgeAutomationInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  checkUpkeep: TypedContractMethod<
    [arg0: BytesLike],
    [[boolean, string] & { upkeepNeeded: boolean; performData: string }],
    "view"
  >;

  createStrategy: TypedContractMethod<
    [
      token: AddressLike,
      amount: BigNumberish,
      targetPrice: BigNumberish,
      threshold: BigNumberish,
      hedgeType: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  deactivateStrategy: TypedContractMethod<
    [strategyId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getAllUsers: TypedContractMethod<[], [string[]], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  performUpkeep: TypedContractMethod<
    [performData: BytesLike],
    [void],
    "nonpayable"
  >;

  priceFeeds: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateStrategy: TypedContractMethod<
    [
      strategyId: BigNumberish,
      newTargetPrice: BigNumberish,
      newThreshold: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  userStrategies: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [string, bigint, bigint, bigint, boolean, bigint] & {
        token: string;
        amount: bigint;
        targetPrice: bigint;
        threshold: bigint;
        isActive: boolean;
        hedgeType: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "checkUpkeep"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [[boolean, string] & { upkeepNeeded: boolean; performData: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "createStrategy"
  ): TypedContractMethod<
    [
      token: AddressLike,
      amount: BigNumberish,
      targetPrice: BigNumberish,
      threshold: BigNumberish,
      hedgeType: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deactivateStrategy"
  ): TypedContractMethod<[strategyId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAllUsers"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "performUpkeep"
  ): TypedContractMethod<[performData: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "priceFeeds"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateStrategy"
  ): TypedContractMethod<
    [
      strategyId: BigNumberish,
      newTargetPrice: BigNumberish,
      newThreshold: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userStrategies"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [string, bigint, bigint, bigint, boolean, bigint] & {
        token: string;
        amount: bigint;
        targetPrice: bigint;
        threshold: bigint;
        isActive: boolean;
        hedgeType: bigint;
      }
    ],
    "view"
  >;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RebalanceTriggered"
  ): TypedContractEvent<
    RebalanceTriggeredEvent.InputTuple,
    RebalanceTriggeredEvent.OutputTuple,
    RebalanceTriggeredEvent.OutputObject
  >;
  getEvent(
    key: "StrategyCreated"
  ): TypedContractEvent<
    StrategyCreatedEvent.InputTuple,
    StrategyCreatedEvent.OutputTuple,
    StrategyCreatedEvent.OutputObject
  >;
  getEvent(
    key: "StrategyExecuted"
  ): TypedContractEvent<
    StrategyExecutedEvent.InputTuple,
    StrategyExecutedEvent.OutputTuple,
    StrategyExecutedEvent.OutputObject
  >;
  getEvent(
    key: "StrategyUpdated"
  ): TypedContractEvent<
    StrategyUpdatedEvent.InputTuple,
    StrategyUpdatedEvent.OutputTuple,
    StrategyUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "UpkeepChecked"
  ): TypedContractEvent<
    UpkeepCheckedEvent.InputTuple,
    UpkeepCheckedEvent.OutputTuple,
    UpkeepCheckedEvent.OutputObject
  >;
  getEvent(
    key: "UpkeepPerformed"
  ): TypedContractEvent<
    UpkeepPerformedEvent.InputTuple,
    UpkeepPerformedEvent.OutputTuple,
    UpkeepPerformedEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RebalanceTriggered(address,uint256,uint256)": TypedContractEvent<
      RebalanceTriggeredEvent.InputTuple,
      RebalanceTriggeredEvent.OutputTuple,
      RebalanceTriggeredEvent.OutputObject
    >;
    RebalanceTriggered: TypedContractEvent<
      RebalanceTriggeredEvent.InputTuple,
      RebalanceTriggeredEvent.OutputTuple,
      RebalanceTriggeredEvent.OutputObject
    >;

    "StrategyCreated(address,uint256,uint8)": TypedContractEvent<
      StrategyCreatedEvent.InputTuple,
      StrategyCreatedEvent.OutputTuple,
      StrategyCreatedEvent.OutputObject
    >;
    StrategyCreated: TypedContractEvent<
      StrategyCreatedEvent.InputTuple,
      StrategyCreatedEvent.OutputTuple,
      StrategyCreatedEvent.OutputObject
    >;

    "StrategyExecuted(address,uint256,uint256)": TypedContractEvent<
      StrategyExecutedEvent.InputTuple,
      StrategyExecutedEvent.OutputTuple,
      StrategyExecutedEvent.OutputObject
    >;
    StrategyExecuted: TypedContractEvent<
      StrategyExecutedEvent.InputTuple,
      StrategyExecutedEvent.OutputTuple,
      StrategyExecutedEvent.OutputObject
    >;

    "StrategyUpdated(address,uint256)": TypedContractEvent<
      StrategyUpdatedEvent.InputTuple,
      StrategyUpdatedEvent.OutputTuple,
      StrategyUpdatedEvent.OutputObject
    >;
    StrategyUpdated: TypedContractEvent<
      StrategyUpdatedEvent.InputTuple,
      StrategyUpdatedEvent.OutputTuple,
      StrategyUpdatedEvent.OutputObject
    >;

    "UpkeepChecked(bool,bytes)": TypedContractEvent<
      UpkeepCheckedEvent.InputTuple,
      UpkeepCheckedEvent.OutputTuple,
      UpkeepCheckedEvent.OutputObject
    >;
    UpkeepChecked: TypedContractEvent<
      UpkeepCheckedEvent.InputTuple,
      UpkeepCheckedEvent.OutputTuple,
      UpkeepCheckedEvent.OutputObject
    >;

    "UpkeepPerformed(address,uint256,uint256)": TypedContractEvent<
      UpkeepPerformedEvent.InputTuple,
      UpkeepPerformedEvent.OutputTuple,
      UpkeepPerformedEvent.OutputObject
    >;
    UpkeepPerformed: TypedContractEvent<
      UpkeepPerformedEvent.InputTuple,
      UpkeepPerformedEvent.OutputTuple,
      UpkeepPerformedEvent.OutputObject
    >;
  };
}
