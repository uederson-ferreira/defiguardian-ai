/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IAutomationRegistry {
  export type RegistrationParamsStruct = {
    name: string;
    encryptedEmail: BytesLike;
    upkeepContract: AddressLike;
    gasLimit: BigNumberish;
    adminAddress: AddressLike;
    triggerType: BigNumberish;
    checkData: BytesLike;
    triggerConfig: BytesLike;
    offchainConfig: BytesLike;
    amount: BigNumberish;
  };

  export type RegistrationParamsStructOutput = [
    name: string,
    encryptedEmail: string,
    upkeepContract: string,
    gasLimit: bigint,
    adminAddress: string,
    triggerType: bigint,
    checkData: string,
    triggerConfig: string,
    offchainConfig: string,
    amount: bigint
  ] & {
    name: string;
    encryptedEmail: string;
    upkeepContract: string;
    gasLimit: bigint;
    adminAddress: string;
    triggerType: bigint;
    checkData: string;
    triggerConfig: string;
    offchainConfig: string;
    amount: bigint;
  };
}

export interface IAutomationRegistryInterface extends Interface {
  getFunction(
    nameOrSignature: "getUpkeep" | "registerUpkeep"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getUpkeep",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerUpkeep",
    values: [IAutomationRegistry.RegistrationParamsStruct]
  ): string;

  decodeFunctionResult(functionFragment: "getUpkeep", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerUpkeep",
    data: BytesLike
  ): Result;
}

export interface IAutomationRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): IAutomationRegistry;
  waitForDeployment(): Promise<this>;

  interface: IAutomationRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getUpkeep: TypedContractMethod<
    [id: BigNumberish],
    [
      [
        string,
        bigint,
        string,
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        string
      ] & {
        target: string;
        executeGas: bigint;
        checkData: string;
        balance: bigint;
        admin: string;
        maxValidBlocknumber: bigint;
        lastPerformBlockNumber: bigint;
        amountSpent: bigint;
        paused: boolean;
        offchainConfig: string;
      }
    ],
    "view"
  >;

  registerUpkeep: TypedContractMethod<
    [requestParams: IAutomationRegistry.RegistrationParamsStruct],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getUpkeep"
  ): TypedContractMethod<
    [id: BigNumberish],
    [
      [
        string,
        bigint,
        string,
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        string
      ] & {
        target: string;
        executeGas: bigint;
        checkData: string;
        balance: bigint;
        admin: string;
        maxValidBlocknumber: bigint;
        lastPerformBlockNumber: bigint;
        amountSpent: bigint;
        paused: boolean;
        offchainConfig: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerUpkeep"
  ): TypedContractMethod<
    [requestParams: IAutomationRegistry.RegistrationParamsStruct],
    [bigint],
    "nonpayable"
  >;

  filters: {};
}
